<script type="text/javascript">


$(function() {

	// binds / rebinds lightbox to photo clicks
	function bindLightBox() {
	  $('#photos a[@rel*=thumb]').lightBox();
	}

	// bind the lightbox as son as we're loaded.
	bindLightBox();

	// Capture clicks within the photos list.
	// This allows us to trap events from dynamically added ajax content within it.
	$('#photos').click(function(e) {
  
    if( $(e.target).is('a[@rel*=remove]') ) {
      // remove link clicked, launch ajax remove
    
      // get the parent div so we can remove it on successful deletion
  	  var thumb = $(e.target).parents("li");

      // send the ajax delete request. This requires passing a _method=delete 
      // param for the browser REST compatibility that rails supports.
  	  $.post(e.target.href, {_method:"delete", authenticity_token:"<%= form_authenticity_token %>"}, function(data) {
  	    // remove the thumbnail from the display on success
        thumb.remove();
      
        // re-bind lightbox to the photos elements so we have a correct count
        bindLightBox();
  	  });
  
    } else if( $(e.target).is('a[@rel*=edit]') ) {
      // edit link clicked, launch thickbox
      tb_show(e.target.title, e.target.href);
     
    }
  
    // cancel the click
    return false;
  
  });


	// allows for photo sorting within an album by dragging them around.
	// updates the order on the fly using ajax
	// this is by far the trickiest JS in the app
	$("#photos").sortable({ 
      placeholder: "ui-selected",
      opacity: 0.7,
      update: function(e, ui) {
        // determine the end position for the element that was moved
      
        // end order as an array
        var end_order = $(this).sortable('serialize').replace(/photo\[\]\=/g, '').split('&');
      
        // id of element that was moved (element is in the ui.helper object)
        var moved_photo_id = ui.helper.attr('id').replace('photo_', ''); // parse photo_ from the id
      
        // determine the end position of the moved element
        var end_position = 0;
        // loop through all order elements
        for (var y=0; y<end_order.length; y++) {
          // if the ids match, then we have the new index
          if (end_order[y] === moved_photo_id) {
            end_position = y;
            break; // found it, bail
          }
        }
        // increment it to match our backend which starts the list at 1 instead of 0
        end_position++;
      
        // ajax post to save the position change
        // we're passing the parent album, the moved photo, and the new position of the photo
        $.post('/users/<%= @user.id %>/albums/<%= @object.id %>/photos/' + moved_photo_id + '/update_position', {_method:"put", authenticity_token:"<%= form_authenticity_token %>", position:end_position}, function(data) {
   	    
          // re-bind lightbox so the photos elements are in the right order for next / prev buttons
          bindLightBox();
     	  });

      },
      revert: true
  });

});
</script>

<h4><%= link_to 'Launch Album View &raquo;', object_path %></h4>
<p>
  <a class="button positive thickbox" href="<%= new_user_album_photo_path(current_user, @album) %>?width=350&height=250" title="Upload Photo">
    <%= image_tag 'icons/key.png' %> Upload Photo
  </a>  
  
  <a class="button positive thickbox" href="<%= new_user_album_zip_archive_path(current_user, @album) %>?width=350&height=250" title="Upload Zip archive"
	<%= image_tag 'icons/key.png' %> Upload Zip archive
  </a>
</p>
<p class="clear">
  You can drag and drop photos to change their display order. The very first photo will be the cover for the album. Photos are resized to a 3:2 aspect ratio for display on the site once they've been submitted, so the closer you can get each photo's original dimensions to 3:2 the better they will look. I.e. 720 x 480. 3:2 was chosen because it's the standard aspect ratio of dSLR cameras.
</p>
<ul id="photos">
  <%= render :partial => "/photos/row", :collection => @object.photos %>
</ul>
<div id="divStatus" style="display:none"></div>